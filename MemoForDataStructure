基本
from collections import deque
data = deque()
----------------------------------------------------
Stack(popで尻からとる)
一時的にデータを退避したいときに有効なデータ構造。LIFO方式
push(x)またはappend(x)---スタックの末尾に要素xを追加
pop()---最後に入れたものを取り出す(そのスタックからは取り除かれる)

d.append('d')
print(d)
# deque(['a', 'b', 'c', 'd'])

print(d.pop())
# d

print(d)
# deque(['a', 'b', 'c'])
----------------------------------------------------
Queue(popleftで頭からとる)
データを到着順に使用したいときに用いるデータ構造。FIFO方式
enquere(x)---キューの末尾に要素xを追加
dequeue()---キューの先頭から要素を取り出す
[先頭<=末尾]

d.append('d')
print(d)
# deque(['a', 'b', 'c', 'd'])

print(d.popleft())
# a

print(d)
# deque(['b', 'c', 'd'])
----------------------------------------------------
Linked List
https://fuji-pocketbook.net/python-linkedlist/
データとデータ同士の繋がりの情報(ポインタ)をもつデータ構造
データとポインタを合わせてノードという
データの追加や削除を高速で実行することができる

配列(list)
データがメモリ上に一列に並んでいる。
メリット:インデックスを利用したデータのアクセスが可能

Single Linked List
一方通行で次のデータへのポインタを持っている

Double Linked List
前後のデータへのポインタを持つ

Circular Linked List
上記を線形リストと呼ぶのに対し、先頭や末尾が存在せず円環状に要素が繋がれているものを指す
